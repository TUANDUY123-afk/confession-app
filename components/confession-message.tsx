"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Heart } from "lucide-react"

interface ConfessionMessageProps {
  accepted: boolean
  onAccepted?: () => void
}

export default function ConfessionMessage({ accepted, onAccepted }: ConfessionMessageProps) {
  const [displayedText, setDisplayedText] = useState("")
  const [showContinue, setShowContinue] = useState(false)
  const [showExplosion, setShowExplosion] = useState(false)
  const [rejectPosition, setRejectPosition] = useState({ x: 0, y: 0 })
  const [rejectScale, setRejectScale] = useState(1)
  const router = useRouter()

  const fullMessage = `Y·∫øn Nhi y√™u d·∫•u,

Anh vi·∫øt nh·ªØng d√≤ng n√†y v·ªõi t·∫•m l√≤ng ch√¢n th√†nh. Tr∆∞·ªõc ti√™n, anh mu·ªën xin l·ªói em v√¨ nh·ªØng l·∫ßn anh ƒë√£ l√†m em bu·ªìn, nh·ªØng l·∫ßn anh kh√¥ng hi·ªÉu ƒë∆∞·ª£c c·∫£m x√∫c c·ªßa em, v√† nh·ªØng l√∫c anh kh√¥ng ƒë·ªß t·ªët.

Anh bi·∫øt r·∫±ng anh ƒë√£ m·∫Øc l·ªói, nh∆∞ng anh c≈©ng bi·∫øt r·∫±ng em l√† ng∆∞·ªùi anh y√™u th∆∞∆°ng nh·∫•t. T·ª´ ng√†y em xu·∫•t hi·ªán trong cu·ªôc ƒë·ªùi anh, m·ªçi th·ª© tr·ªü n√™n c√≥ √Ω nghƒ©a h∆°n.

Em l√† √°nh s√°ng s√°ng nh·∫•t trong nh·ªØng ng√†y t·ªëi tƒÉm c·ªßa anh. Anh y√™u c√°ch em c∆∞·ªùi, c√°ch em n√≥i chuy·ªán, c√°ch em quan t√¢m ƒë·∫øn nh·ªØng ng∆∞·ªùi xung quanh.

Anh xin l·ªói em t·ª´ ƒë√°y l√≤ng v√† anh h·ª©a s·∫Ω c·ªë g·∫Øng tr·ªü th√†nh ng∆∞·ªùi t·ªët h∆°n cho em. Anh mu·ªën b√™n em, h·ªó tr·ª£ em, v√† t·∫°o n√™n nh·ªØng k·ª∑ ni·ªám ƒë·∫πp c√πng em.

Y·∫øn Nhi, em c√≥ ch·∫•p nh·∫≠n t√¨nh c·∫£m ch√¢n th√†nh c·ªßa anh kh√¥ng? üíï`

  // G√µ ch·ªØ t·ª´ng k√Ω t·ª±
  useEffect(() => {
    let index = 0
    const interval = setInterval(() => {
      if (index < fullMessage.length) {
        setDisplayedText(fullMessage.slice(0, index + 1))
        index++
      } else {
        clearInterval(interval)
        setShowContinue(true)
      }
    }, 30)
    return () => clearInterval(interval)
  }, [])

  // X·ª≠ l√Ω n√∫t T·ª´ ch·ªëi ch·∫°y tr·ªën
  const handleReject = () => {
    const randomX = (Math.random() - 0.5) * 300
    const randomY = (Math.random() - 0.5) * 300
    setRejectPosition({ x: randomX, y: randomY })
    setRejectScale((prev) => Math.max(prev - 0.2, 0.3))
  }

  // Khi ·∫•n ƒê·ªìng √Ω ‚ù§Ô∏è
  const handleAccept = () => {
    setShowExplosion(true)
    onAccepted?.() // g·ªçi callback truy·ªÅn t·ª´ ngo√†i (ƒë·ªÉ chuy·ªÉn trang)
    setTimeout(() => {
      setShowExplosion(false)
      router.push("/anniversary") // chuy·ªÉn sang trang k·ª∑ ni·ªám
    }, 1500)
  }

  return (
    <div className="relative z-10 max-w-2xl mx-auto">
      <div className="bg-white/95 backdrop-blur rounded-3xl shadow-2xl p-8 md:p-12 relative overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-center gap-2 mb-6">
          <Heart className="w-6 h-6 text-primary animate-pulse" fill="currentColor" />
          <h1 className="text-3xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
            G·ª≠i t·ªõi em, C√¥ng ch√∫a nh·ªè c·ªßa anh
          </h1>
          <Heart className="w-6 h-6 text-primary animate-pulse" fill="currentColor" />
        </div>

        {/* Message */}
        <div className="text-lg leading-relaxed text-foreground mb-8 min-h-64 whitespace-pre-wrap">
          {displayedText}
          {displayedText.length < fullMessage.length && <span className="animate-pulse">|</span>}
        </div>

        {/* Buttons */}
        {showContinue && (
          <div className="flex flex-col gap-4 animate-fade-in">
            {accepted ? (
              <div className="text-center space-y-4">
                <div className="text-6xl animate-bounce">üéâ</div>
                <p className="text-2xl font-bold text-primary">Y·∫øn Nhi ƒë√£ ch·∫•p nh·∫≠n! üíï</p>
                <p className="text-muted-foreground">
                  C·∫£m ∆°n em ƒë√£ cho anh c∆° h·ªôi n√†y. Anh s·∫Ω y√™u th∆∞∆°ng em h·∫øt l√≤ng.
                </p>
              </div>
            ) : (
              <div className="flex gap-4 justify-center items-center relative">
                <button
                  onClick={handleAccept}
                  className="px-8 py-3 bg-gradient-to-r from-pink-500 to-rose-500 text-white font-bold rounded-full shadow-lg hover:shadow-xl transform hover:scale-110 transition-all duration-300"
                >
                  ƒê·ªìng √Ω ‚ù§Ô∏è
                </button>

                <button
                  onClick={handleReject}
                  style={{
                    transform: `translate(${rejectPosition.x}px, ${rejectPosition.y}px) scale(${rejectScale})`,
                    transition: "transform 0.3s ease-out",
                  }}
                  className="px-8 py-3 bg-gray-200 text-gray-600 font-bold rounded-full shadow-lg hover:shadow-xl transition-all duration-300"
                >
                  T·ª´ ch·ªëi
                </button>
              </div>
            )}
          </div>
        )}

        {/* üí• Hi·ªáu ·ª©ng n·ªï tim */}
        {showExplosion && (
          <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
            {[...Array(20)].map((_, i) => (
              <span
                key={i}
                className="absolute text-pink-500 text-2xl animate-particle"
                style={{
                  left: "50%",
                  top: "50%",
                  transform: `translate(-50%, -50%) rotate(${i * (360 / 20)}deg) translateY(-80px)`,
                  animationDelay: `${i * 0.05}s`,
                }}
              >
                üíñ
              </span>
            ))}
          </div>
        )}
      </div>

      {/* Trang tr√≠ */}
      <div className="absolute -top-10 -left-10 text-6xl opacity-20 animate-float">üíê</div>
      <div
        className="absolute -bottom-10 -right-10 text-6xl opacity-20 animate-float"
        style={{ animationDelay: "1s" }}
      >
        üåπ
      </div>

      {/* CSS keyframes cho hi·ªáu ·ª©ng n·ªï */}
      <style jsx>{`
        @keyframes particle {
          0% {
            opacity: 1;
            transform: translate(-50%, -50%) scale(1);
          }
          100% {
            opacity: 0;
            transform: translate(-50%, -50%) scale(0.5) translateY(-120px);
          }
        }
        .animate-particle {
          animation: particle 1.2s ease-out forwards;
        }
      `}</style>
    </div>
  )
}
